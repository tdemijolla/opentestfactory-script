import argparse
import base64
import hashlib
import json
import sys
import tarfile
import threading
from time import sleep

import docker
import requests

parser = argparse.ArgumentParser(description="Get container id and timeout")

parser.add_argument(
    "--container_id", help="docker id of the container to check", required=True
)

parser.add_argument(
    "--timeout",
    help="verification timeout",
    default=3600,
)

parser.add_argument(
    "--host",
    help="target host with protocol (e.g. https://example.local)",
    required=True,
)

parser.add_argument(
    "--port",
    help="target port (default to 38368)",
    default=38368,
)

parser.add_argument(
    "--token",
    help="token",
    required=True,
)

args = parser.parse_args()

INIT_FILE_PATH = "app/init_services.json"
EXIT_CODE = 1
CONTAINEUR_ID = args.container_id
TIMEOUT = args.timeout
HOST = args.host
PORT = args.port
TOKEN = args.token
SLEEP_DELAY = 1


def get_container():
    """Return targeted container."""
    client = docker.from_env()
    try:
        container = client.containers.get(CONTAINEUR_ID)
        return container
    except docker.errors.NotFound:
        print("::ERROR::Container not found")
        return None


def is_ready_container():
    """Verify if container is running."""
    try:
        container = get_container()
        return container.status == "running"
    except:
        return False


def get_checked_json_file():
    """Get services json file and validate it."""
    try:
        init_services_json = get_init_services_json()
        if validate_checksum(
            init_services_json["services"], init_services_json["checksum"]
        ):
            return init_services_json
    except:
        pass
    return None


def get_init_services_json():
    """Get services json file from the docker container."""
    container = get_container()
    bits = container.get_archive(INIT_FILE_PATH)[0]

    with open("./init_services.tar", "wb") as f:
        for chunk in bits:
            f.write(chunk)

    with tarfile.open("init_services.tar", "r:tar") as tar:
        tar.extractall()

    with open("init_services.json") as json_file:
        init_services_json = json.load(json_file)

    return init_services_json


def validate_checksum(init_services, init_checksum):
    """Validate integrity of services json file."""
    services = "".join(init_services)
    services_bytes = base64.b64encode(services.encode("utf-8"))
    checksum = hashlib.sha256(services_bytes).hexdigest()
    return init_checksum == checksum


def are_ready_subscribers(init_services_list):
    """Check if declared services are ready to work."""
    try:
        checked_subscribers_list = get_checked_subscribers_list()
        init_services_list = list(init_services_list)
        init_services_list.remove("Receptionist")
        init_services_list.remove("Killswitch")
        init_services_list.remove("sshee")
        init_services_list.append("sshchannel")
        init_services_list.remove("Arranger")
        init_services_list.append("arranger")
        init_services_list.remove("Observer")
        init_services_list.append("observer")
        init_services_list.remove("LocalCleaner")
        init_services_list.append("localcleaner")
        return set(init_services_list) == set(checked_subscribers_list)
    except:
        return False


def _find(key, dictionary):
    """Find all values for a key in a json file."""
    for k, v in dictionary.items():
        if k == key:
            yield v
        elif isinstance(v, dict):
            for result in _find(key, v):
                yield result
        elif isinstance(v, list):
            for d in v:
                for result in _find(key, d):
                    yield result


def get_checked_subscribers_list():
    """Get list of subscibers services from docker container."""
    headers = {"Authorization": (f"Bearer {TOKEN}")}
    response = requests.get(f"{HOST}:{PORT}/subscriptions", headers=headers)
    data = response.json()
    subscribers_set = set(_find("name", data))
    subscribers_list = list(subscribers_set)
    return subscribers_list


def wait_till_ready():
    """Verify if orchestrator inside docker container is ready."""
    global EXIT_CODE
    while not is_ready_container():
        sleep(SLEEP_DELAY)
    while not (init_services_list := get_checked_json_file()):
        sleep(SLEEP_DELAY)
    while not are_ready_subscribers(init_services_list["services"]):
        sleep(SLEEP_DELAY)

    EXIT_CODE = 0


def main():
    """Manage the script"""
    thread = threading.Thread(target=wait_till_ready, daemon=True)
    thread.start()
    thread.join(timeout=int(TIMEOUT))
    print("exiting with code", EXIT_CODE)
    sys.exit(EXIT_CODE)


if __name__ == "__main__":
    main()
